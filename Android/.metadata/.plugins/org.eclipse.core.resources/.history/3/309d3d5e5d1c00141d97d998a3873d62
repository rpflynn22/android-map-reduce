package com.example.androidmapreduce;

import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStreamReader;
import java.io.UnsupportedEncodingException;
import java.net.HttpURLConnection;
import java.net.MalformedURLException;
import java.net.ProtocolException;
import java.net.URL;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.concurrent.ExecutionException;

import org.apache.http.HttpResponse;
import org.apache.http.NameValuePair;
import org.apache.http.client.ClientProtocolException;
import org.apache.http.client.HttpClient;
import org.apache.http.client.entity.UrlEncodedFormEntity;
import org.apache.http.client.methods.HttpPost;
import org.apache.http.impl.client.DefaultHttpClient;
import org.apache.http.message.BasicNameValuePair;

import android.app.Activity;
import android.os.AsyncTask;
import android.os.Bundle;
import android.provider.Settings.Secure;
import android.view.Menu;

public class ReadFileActivity extends Activity {
	
	public static final String SITE_URL = "http://android-map-reduce.herokuapp.com/";

	@Override
	protected void onCreate(Bundle savedInstanceState) {
		super.onCreate(savedInstanceState);
		setContentView(R.layout.activity_read_file);
		final String android_id = Secure.getString(this.getContentResolver(),
                Secure.ANDROID_ID);
		boolean fileAvailable = false;
		while (!fileAvailable) {
			try {
				String resp = new CheckFile().execute(android_id).get();
				if (resp != null) {
					fileAvailable = true;
					int giveMapped = new MapAnalysis().execute(resp, android_id).get();
				}
			} catch (ExecutionException e) {
        		e.printStackTrace();
        	} catch (InterruptedException e) {
        		e.printStackTrace();
        	}
			
			
		}
	}

	@Override
	public boolean onCreateOptionsMenu(Menu menu) {
		// Inflate the menu; this adds items to the action bar if it is present.
		getMenuInflater().inflate(R.menu.read_file, menu);
		return true;
	}
	
	private class CheckFile extends AsyncTask<String, Void, String> {
    	public String doInBackground(String... id) {
    		try {
    			String android_id = id[0];
            	String url = SITE_URL.concat("/readfile?android_id=").concat(android_id);
            	URL obj = new URL(url);
        		HttpURLConnection con = (HttpURLConnection) obj.openConnection();
        		con.setRequestMethod("GET");
        		BufferedReader in = new BufferedReader(
        		        new InputStreamReader(con.getInputStream()));
        		String inputLine;
        		StringBuffer response = new StringBuffer();
         
        		while ((inputLine = in.readLine()) != null) {
        			response.append(inputLine);
        		}
        		in.close();
        		if (response.toString().length() == 0) {
        			return null;
        		}
        		return response.toString();
        	} catch (MalformedURLException e) {
        		e.printStackTrace();
        	} catch (ProtocolException e) {
        		e.printStackTrace();
        	} catch (IOException e) {
        		e.printStackTrace();
        	}
    		return null;
        }
	}
	
	private class MapAnalysis extends AsyncTask<String, Void, Integer> {
		public Integer doInBackground(String... args) {
			String resp = args[0];
			String android_id = args[1];
			String[] words = resp.toLowerCase().split("\\s+");
			Map<String, Integer> map = new HashMap<String, Integer>();
			for (String word : words) {
				Integer count = map.get(word);
				if (count == null) {
					map.put(word, 1);
		    	} else {
		    		map.put(word, count + 1);
		    	}
		    }
			StringBuilder keyvals = new StringBuilder();
		    for (String word : map.keySet()) {
		    	keyvals.append(word);
		    	keyvals.append("\t");
		    	keyvals.append(map.get(word));
		    	keyvals.append("\n");
		    }
		    String keyvalsString = keyvals.toString();
		    String url = SITE_URL.concat("mapresponse");
		    HttpClient client = new DefaultHttpClient();
		    HttpPost post = new HttpPost(url);
		    List<NameValuePair> pairs = new ArrayList<NameValuePair>();
		    pairs.add(new BasicNameValuePair("keyvals", keyvalsString));
		    pairs.add(new BasicNameValuePair("android_id", android_id));
		    try {
				post.setEntity(new UrlEncodedFormEntity(pairs));
				HttpResponse response = client.execute(post);
				return response.getStatusLine().getStatusCode();
			} catch (UnsupportedEncodingException e) {
				e.printStackTrace();
			} catch (ClientProtocolException e) {
				e.printStackTrace();
			} catch (IOException e) {
				e.printStackTrace();
			}
		    return null;
		}
	}
}
